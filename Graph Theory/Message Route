#include <bits/stdc++.h>
using namespace std;

void bfs(int start,int end,vector<int>& dist,vector<vector<int>>& adj,int n) {
    queue<pair<int,int>> q;
    vector<int> parent(n+1);
    q.push({1,0});
    dist[1] = 0;
    parent[1] = 1;

    while(!q.empty()) {
        auto fr = q.front();
        q.pop();

        int curr = fr.first;
        int dis = fr.second;

        if(curr == end) {
            vector<int> path;
            while(curr != 1) {
                path.push_back(curr);
                curr = parent[curr];
            }
            path.push_back(1);
            reverse(path.begin(),path.end());
            cout << path.size() << endl;
            for(int i : path) {
                cout << i << " ";
            }
            cout <<endl;
            return;
        }

        for(auto ne : adj[curr]) {
            if(dist[ne] > dis + 1) {
                parent[ne] = curr;
                dist[ne] = dis + 1;
                q.push({ne,dis + 1});
            }
        }
    }
    cout << "IMPOSSIBLE" << endl;
}

int main() {
    int n,m;
    cin >> n >> m;
    vector<vector<int>> adj(n+1);
    for(int i = 0;i<m;i++) {
        int u,v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    vector<int> dist(n+1,1e9);
    bfs(1,n,dist,adj,n);


}
