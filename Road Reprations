#include<bits/stdc++.h>
using namespace std;

void dfs(int node,vector<vector<pair<int,int>>>& adj,vector<int>& vis) {
    vis[node] = 1;
    for(auto ne : adj[node]) {
        if(!vis[ne.first]) {
            dfs(ne.first,adj,vis);
        }
    }
}

int main() {
    int n,m;
    cin >> n >> m;

    vector<vector<pair<int,int>>> adj(n+1);
    for(int i = 0;i < m;i++) {
        int u,v,w;
        cin >> u >> v >> w;
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
    }

    int cnt = 0;
    vector<int> v(n+1,0);
    for(int i = 1;i<=n;i++) {
        if(!v[i]) {
            cnt++;
            dfs(i,adj,v);
        }
    }

    if(cnt > 1) {
        cout << "IMPOSSIBLE" << endl;
    }

    else {
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq; //{weight,node};
        pq.push({0,1});
        vector<int> vis(n+1,0);

        long long sum = 0;
        while(!pq.empty()) {
            auto fr = pq.top();
            pq.pop();
            int curr = fr.second;
            int we = fr.first;

            if(vis[curr]) continue;

            sum += we;
            vis[curr] = 1;

            for(auto ne : adj[curr]) {
                int node = ne.first;
                int weight = ne.second;

                if(!vis[node]) {
                    pq.push({weight,node});
                }
            }

        }

        cout << sum << endl;
    }
    
}
